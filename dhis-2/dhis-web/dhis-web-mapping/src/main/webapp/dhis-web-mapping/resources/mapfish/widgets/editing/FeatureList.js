Ext.namespace('mapfish.widgets');Ext.namespace('mapfish.widgets.editing');mapfish.widgets.editing.FeatureList=function(config){Ext.apply(this,config,{sm:new Ext.grid.RowSelectionModel({singleSelect:true}),clicksToEdit:1,enableDragDrop:true});mapfish.widgets.editing.FeatureList.superclass.constructor.call(this);};Ext.extend(mapfish.widgets.editing.FeatureList,Ext.grid.EditorGridPanel,{featureType:null,map:null,layer:null,automaticMode:false,autoFocusMode:2,displayNotEdited:true,editGeometryVisual:function(geometry,record,edited){return geometry?(edited?"->":"X"):"";},isDnd:false,colDefs:null,modifyFeature:null,initComponent:function(){if(!this.map&&!this.layer){OpenLayers.Console.error("Mandatory param for FeatureList missing: layer and/or map");}
if(!this.featureType){OpenLayers.Console.error("Mandatory param for FeatureList missing: featureType");}
this.colDefs=this.columns;mapfish.widgets.editing.FeatureList.superclass.initComponent.call(this);this.setGeoColRenderer();if(!this.map){this.map=this.layer.map;}else if(!this.layer){this.layer=new OpenLayers.Layer.Vector("Geometry editing");this.map.addLayer(this.layer);}
var self=this;this.addEvents({geomodifstart:true,geomodif:true,geomodifend:true});var mode=OpenLayers.Control.ModifyFeature.RESHAPE|OpenLayers.Control.ModifyFeature.DRAG;this.modifyFeature=new OpenLayers.Control.ModifyFeature(this.layer,{mode:mode,onModificationStart:function(feature){if(!self.automaticMode){this.activate();}
self.refreshGeometryVisual(feature.data);var record=feature.data;var row=self.getStore().findBy(function(r){return r.id==record.id;});self.getView().focusCell(row,0);self.getSelectionModel().selectRange(row,row);self.fireEvent('geomodifstart',self,record,feature);},onModification:function(feature){self.fireEvent('geomodif',self,feature.data,feature);},onModificationEnd:function(feature){if(!self.automaticMode){this.deactivate();}
if(feature.data){self.refreshGeometryVisual(feature.data);}
if(!self.displayNotEdited){self.layer.removeFeatures(feature);}
self.fireEvent('geomodifend',self,feature.data,feature);}});this.map.addControl(this.modifyFeature);this.getStore().on("remove",function(store,record,index){this.removeGeometries(record);},this);this.getStore().on("clear",function(store){store.each(this.removeGeometries,this);},this);function add(store,records,index){if(self.displayNotEdited){for(var i=0;i<records.length;++i){self.addGeometries(records[i]);}}
return true;}
this.getStore().on("add",add);this.getStore().on("load",function(store,records,options){if(!options.add){if(this.modifyFeature.feature){this.modifyFeature.selectControl.unselect(this.modifyFeature.feature);}
this.clearLayer();}
add(store,records,0);return true;},this);},onRender:function(){mapfish.widgets.editing.FeatureList.superclass.onRender.apply(this,arguments);var self=this;var ddrow=new Ext.dd.DropTarget(this.getView().mainBody,{ddGroup:'GridDD',notifyOver:function(source,e,data){var cindex=source.getDragData(e).rowIndex;if(typeof cindex!="undefined"){return this.dropAllowed;}
return this.dropNotAllowed;},notifyDrop:function(dd,e,data){var dragData=dd.getDragData(e);var destIndex=dragData.rowIndex;if(typeof destIndex!="undefined"){var record=data.selections[0];self.isDnd=true;data.grid.store.remove(record);dragData.grid.store.insert(destIndex,record);self.isDnd=false;return true;}
return false;}});if(this.displayNotEdited){this.drawAllFeatures();}},eachGeoColumn:function(callback){for(var i=0;i<this.colDefs.length;++i){var col=this.colDefs[i];var colDesc=this.featureType.prototype.fields.get(col.dataIndex);if(colDesc.type=='geo'){callback.call(this,col,colDesc,i);}}},setGeoColRenderer:function(){this.eachGeoColumn(function(col,colDesc,colNum){col.renderer=OpenLayers.Function.bind(function(value,cellMetaData,record,rowNum,colNum,store){if(value){var edited=(this.grid.modifyFeature.feature!=null)&&(this.grid.getFeatureByGeometry(value)==this.grid.modifyFeature.feature);return'<div onclick="mapfish.widgets.editing.FeatureList.geometryClickHandler(\''
+this.grid.id+'\', '+record.id+', \''+this.colName+'\');">'
+this.grid.editGeometryVisual(value,record,edited)+'</div>';}else{return this.grid.editGeometryVisual(value,record,false);}},{grid:this,colName:colDesc.name});});},drawAllFeatures:function(){this.clearLayer();if(this.displayNotEdited){var features=[];this.eachGeoColumn(function(col,colDesc,colNum){this.store.each(function(record){var geometry=record.get(colDesc.name);if(geometry&&!this.getFeatureByGeometry(geometry)){var vector=new OpenLayers.Feature.Vector(geometry,record);features.push(vector);}},this);});this.layer.addFeatures(features);}},addGeometries:function(record){var layer=this.layer;this.eachGeoColumn(function(col,colDesc,colNum){var geometry=record.get(colDesc.name);if(geometry&&!this.getFeatureByGeometry(geometry)){var vector=new OpenLayers.Feature.Vector(geometry,record);layer.addFeatures(vector);}});},removeGeometries:function(record){this.eachGeoColumn(function(col,colDesc,colNum){var geometry=record.get(colDesc.name);if(geometry){var feature=this.getFeatureByGeometry(geometry);if(feature){if(feature==this.modifyFeature.feature){feature.data=null;this.modifyFeature.selectControl.unselect(feature);}
this.layer.removeFeatures([feature]);feature.destroy();}}});return true;},getFeatureByGeometry:function(geometry){var features=this.layer.features;for(var i=0;i<features.length;++i){var cur=features[i];if(cur.geometry==geometry){return cur;}}
return null;},editFirstGeometry:function(record){if(this.automaticMode){return;}
var colName;for(var i=0;i<this.colDefs.length;++i){var col=this.colDefs[i];var colDesc=this.featureType.prototype.fields.get(col.dataIndex);if(colDesc.type=='geo'){colName=colDesc.name;break;}}
this.editGeometry(record,colName,false);},editGeometry:function(record,colName,focus){var geometry=record.get(colName);if(!geometry){return;}
var feature=this.getFeatureByGeometry(geometry);if(!feature&&!this.displayNotEdited){feature=new OpenLayers.Feature.Vector(geometry,record);this.layer.addFeatures(feature);}
if(feature){var previousFeature=this.modifyFeature.feature;if(previousFeature){this.modifyFeature.selectControl.unselect(this.modifyFeature.feature);}
if(previousFeature!=feature){this.modifyFeature.selectControl.select(feature);if(focus){this.manageAutoFocus(geometry);}}}else{OpenLayers.Console.error("BUG: cannot find vector feature for: "+record);}},manageAutoFocus:function(geometry){if(this.autoFocusMode==1){this.map.zoomToExtent(geometry.getBounds());}else if(this.autoFocusMode==2){var extent=this.map.getExtent();extent.extend(geometry.getBounds());var margin=extent.getWidth()*0.02;extent.left+=margin;extent.right-=margin;extent.top-=margin;extent.bottom+=margin;this.map.zoomToExtent(extent);}},refreshGeometryVisual:function(record){this.getView().refreshRow(record);},setAutomaticMode:function(automatic){if(automatic==this.automaticMode){return;}
this.automaticMode=automatic;if(this.modifyFeature.feature){this.modifyFeature.selectControl.unselect(this.modifyFeature.feature);}
if(automatic){this.modifyFeature.activate();}else{this.modifyFeature.deactivate();}},setDisplayNotEdited:function(value){if(value==this.displayNotEdited){return;}
this.displayNotEdited=value;if(value){this.drawAllFeatures();}else{this.clearLayer();this.setAutomaticMode(false);}},clearLayer:function(){var toRemove=[];var layer=this.layer;var edited=this.modifyFeature.feature;for(var i=0;i<layer.features.length;++i){var cur=layer.features[i];if(cur!=edited&&cur.data&&cur.data.endEdit){toRemove.push(cur);}}
layer.removeFeatures(toRemove);}});Ext.reg('featurelist',mapfish.widgets.editing.FeatureList);mapfish.widgets.editing.FeatureList.geometryClickHandler=function(gridId,recordId,colName){var grid=Ext.getCmp(gridId);if(grid){var record=grid.store.getById(recordId);if(record){grid.editGeometry(record,colName,true);}else{OpenLayers.Console.error("Cannot find record with id="+recordId);}}else{OpenLayers.Console.error("Cannot find grid with id="+gridId);}};mapfish.widgets.editing.FeatureList.createRecord=function(cols){for(var i=0;i<cols.length;++i){var col=cols[i];if(col.type=='geo'){if(!col.convert){col.convert=function(v){return v;};}
if(!col.sortType){col.sortType=Ext.data.SortTypes.none();}}}
return Ext.data.Record.create.apply(null,arguments);};