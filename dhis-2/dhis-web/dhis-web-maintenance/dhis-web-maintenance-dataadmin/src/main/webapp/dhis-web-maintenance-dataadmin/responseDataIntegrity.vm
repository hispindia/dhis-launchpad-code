#macro( violation $name $list )
#set( $size = $list.size() )
"$!encoder.jsEncode( ${name} )": [
#foreach( $o in $list )
"$!encoder.jsonEncode( ${o.displayName} )"#if( $velocityCount < $size ),#end
#end
]
#end

#macro( violationWithCollection $name $list )
#set( $listSize = $list.size() )
"$!encoder.jsonEncode( ${name} )": [
#foreach( $o in $list )
#set( $oSize = $o.size() )
"#foreach( $p in $o ) $!encoder.jsonEncode( ${p.displayName} ) #if( $velocityCount < $oSize ), #end
#end "#if( $velocityCount < $listSize ),#end
#end
]
#end

#macro( violationWithMap $name $map )
#set( $size = $map.keySet().size() )
"$!encoder.jsonEncode( ${name} )": [
#foreach( $o in $map.keySet() )
"$!encoder.jsonEncode( ${o.displayName} ): $map.get( $o )"#if( $velocityCount < $size ),#end
#end
]
#end

#macro( violationWithMapList $name $map )
#set( $mapSize = $map.keySet().size() )
"$!encoder.jsonEncode( ${name} )": [
#foreach( $o in $map.keySet() )
#set( $listSize = $map.get( $o ).size() )
"$!encoder.jsonEncode( ${o.displayName} ):#foreach( $p in $map.get( $o ) ) $!encoder.jsonEncode( ${p.displayName} )#if( $velocityCount < $listSize ), #end
#end "#if( $velocityCount < $mapSize ),#end
#end
]
#end
{
#violation( "dataElementsWithoutDataSet" $dataIntegrityReport.dataElementsWithoutDataSet ),
#violation( "dataElementsWithoutGroups" $dataIntegrityReport.dataElementsWithoutGroups ),
#violationWithMapList( "dataElementsViolatingExclusiveGroupSets" $dataIntegrityReport.dataElementsViolatingExclusiveGroupSets ),
#violationWithMapList( "dataElementsInDataSetNotInForm" $dataIntegrityReport.dataElementsInDataSetNotInForm ),
#violationWithMapList( "dataElementsAssignedToDataSetsWithDifferentPeriodTypes" $dataIntegrityReport.dataElementsAssignedToDataSetsWithDifferentPeriodTypes ),
#violationWithMapList( "categoryOptionCombosNotInDataElementCategoryCombo" $dataIntegrityReport.categoryOptionCombosNotInDataElementCategoryCombo ),
#violation( "dataSetsNotAssignedToOrganisationUnits" $dataIntegrityReport.dataSetsNotAssignedToOrganisationUnits ),
#violation( "sectionsWithInvalidCategoryCombinations" $dataIntegrityReport.sectionsWithInvalidCategoryCombinations ),
#violationWithCollection( "indicatorsWithIdenticalFormulas" $dataIntegrityReport.indicatorsWithIdenticalFormulas ),
#violation( "indicatorsWithoutGroups" $dataIntegrityReport.indicatorsWithoutGroups ),
#violationWithMap( "invalidIndicatorNumerators" $dataIntegrityReport.invalidIndicatorNumerators ),
#violationWithMap( "invalidIndicatorDenominators" $dataIntegrityReport.invalidIndicatorDenominators ),
#violationWithMapList( "indicatorsViolatingExclusiveGroupSets" $dataIntegrityReport.indicatorsViolatingExclusiveGroupSets ),
#violation( "duplicatePeriods" $dataIntegrityReport.duplicatePeriods ),
#violation( "organisationUnitsWithCyclicReferences" $dataIntegrityReport.organisationUnitsWithCyclicReferences ),
#violation( "orphanedOrganisationUnits" $dataIntegrityReport.orphanedOrganisationUnits ),
#violation( "organisationUnitsWithoutGroups" $dataIntegrityReport.organisationUnitsWithoutGroups ),
#violationWithMapList( "organisationUnitsViolatingExclusiveGroupSets" $dataIntegrityReport.organisationUnitsViolatingExclusiveGroupSets ),
#violation( "organisationUnitGroupsWithoutGroupSets" $dataIntegrityReport.organisationUnitGroupsWithoutGroupSets ),
#violation( "validationRulesWithoutGroups" $dataIntegrityReport.validationRulesWithoutGroups ),
#violationWithMap( "invalidValidationRuleLeftSideExpressions" $dataIntegrityReport.invalidValidationRuleLeftSideExpressions ),
#violationWithMap( "invalidValidationRuleRightSideExpressions" $dataIntegrityReport.invalidValidationRuleRightSideExpressions )
}
